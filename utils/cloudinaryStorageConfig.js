import { CloudinaryStorage } from 'multer-storage-cloudinary';
import cloudinary from 'cloudinary';
import path from 'path';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô slug (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏•‡πâ‡∏ß‡∏ô)
const slugify = (filename) => {
  // ‡∏ï‡∏±‡∏î‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
  const nameWithoutExt = path.basename(filename, path.extname(filename));
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
  let slug = nameWithoutExt.toLowerCase();
  
  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏µ‡∏î
  slug = slug
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    .replace(/[^\w\s-]/g, '') // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
    .replace(/[‡∏Å-‡πô]/g, '') // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
    .replace(/[^\x00-\x7F]/g, '') // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ASCII
    .replace(/[\s_-]+/g, '-') // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, ‡∏Ç‡∏µ‡∏î‡∏•‡πà‡∏≤‡∏á, ‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á
    .replace(/^-+|-+$/g, ''); // ‡∏•‡∏ö‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡πâ‡∏≤‡∏¢
  
  // ‡∏ñ‡πâ‡∏≤ slug ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  if (!slug) {
    slug = 'document';
  }
  
  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 80 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö borrow_code ‡πÅ‡∏•‡∏∞ timestamp)
  if (slug.length > 80) {
    slug = slug.substring(0, 80);
  }
  
  return slug;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloudinary (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
const generateCloudinaryFilename = (req, file, borrowCode) => {
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô slug
  const slugifiedName = slugify(file.originalname);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp
  const timestamp = Date.now();
  
  // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
  const extension = path.extname(file.originalname).toLowerCase();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: <borrow_code>_<‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß>_<timestamp><‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå>
  const filename = `${borrowCode}_${slugifiedName}_${timestamp}${extension}`;
  
  return filename;
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Cloudinary storage configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö important documents
export const createImportantDocumentsStorage = (borrowCode) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Cloudinary ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!process.env.CLOUDINARY_CLOUD_NAME || 
      !process.env.CLOUDINARY_API_KEY || 
      !process.env.CLOUDINARY_API_SECRET) {
    console.warn('‚ö†Ô∏è Cloudinary environment variables ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    return null;
  }

  try {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary
    cloudinary.v2.config({
      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á CloudinaryStorage configuration
    const storage = new CloudinaryStorage({
      cloudinary: cloudinary.v2,
      params: {
        folder: 'e-borrow/important_documents',
        resource_type: 'auto', // ‡πÉ‡∏´‡πâ Cloudinary ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
        allowed_formats: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'txt', 'rtf', 'csv']
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ transformation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
      },
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î public_id ‡πÅ‡∏ö‡∏ö custom function
      params: (req, file) => {
        const customFilename = generateCloudinaryFilename(req, file, borrowCode);
        console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Cloudinary: ${customFilename}`);
        return {
          folder: 'e-borrow/important_documents',
          resource_type: 'auto',
          allowed_formats: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'txt', 'rtf', 'csv'],
          // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ transformation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
          public_id: customFilename
        };
      }
    });

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Cloudinary storage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö borrow_code: ${borrowCode}`);
    return storage;

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Cloudinary storage:', error);
    return null;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á multer configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö important documents
export const createImportantDocumentsMulterConfig = (borrowCode) => {
  const storage = createImportantDocumentsStorage(borrowCode);
  
  if (!storage) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Cloudinary storage ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ memory storage ‡πÅ‡∏ó‡∏ô');
    return {
      storage: multer.memoryStorage(),
      fileFilter: createFileFilter(),
      limits: {
        fileSize: 10 * 1024 * 1024, // 10MB
        files: 5 // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡πÑ‡∏ü‡∏•‡πå
      }
    };
  }

  return {
    storage: storage,
    fileFilter: createFileFilter(),
    limits: {
      fileSize: 10 * 1024 * 1024, // 10MB
      files: 5 // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡πÑ‡∏ü‡∏•‡πå
    }
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
const createFileFilter = () => {
  return (req, file, cb) => {
    console.log(`üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ${file.originalname} (${file.mimetype})`);
    
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MIME types ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const allowedMimeTypes = [
      // PDF
      'application/pdf',
      // Microsoft Office
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'application/vnd.ms-powerpoint',
      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
      // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      'image/jpeg',
      'image/jpg',
      'image/png',
      'image/gif',
      'image/bmp',
      'image/webp',
      // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      'text/plain',
      'text/csv',
      'application/rtf'
    ];

    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const allowedExtensions = [
      'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx',
      'jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp',
      'txt', 'rtf', 'csv'
    ];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MIME type
    const isMimeTypeAllowed = allowedMimeTypes.includes(file.mimetype);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    const fileExtension = path.extname(file.originalname).toLowerCase().substring(1);
    const isExtensionAllowed = allowedExtensions.includes(fileExtension);

    if (isMimeTypeAllowed || isExtensionAllowed) {
      console.log(`‚úÖ ‡πÑ‡∏ü‡∏•‡πå ${file.originalname} ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`);
      cb(null, true);
    } else {
      console.log(`‚ùå ‡πÑ‡∏ü‡∏•‡πå ${file.originalname} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (MIME: ${file.mimetype}, Extension: ${fileExtension})`);
      cb(new Error(`‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå ${file.originalname} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï`), false);
    }
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
export const testFilenameGeneration = () => {
  const testFiles = [
    '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç.pdf',
    '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô.docx',
    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢.xlsx',
    '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå.jpg',
    '‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©!@#$%.png',
    '‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á - version 2.0.pdf',
    'document with spaces and special chars (v1.0).docx',
    '‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© mixed.pdf'
  ];

  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:');
  testFiles.forEach(filename => {
    const slugified = slugify(filename);
    const cloudinaryName = generateCloudinaryFilename({}, { originalname: filename }, 'BR-1234');
    console.log(`üìÑ ${filename}`);
    console.log(`   ‚Üí Slug: ${slugified}`);
    console.log(`   ‚Üí Cloudinary: ${cloudinaryName}`);
    console.log('');
  });
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
export const exampleUsage = () => {
  console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('');
  console.log('1. ‡∏™‡∏£‡πâ‡∏≤‡∏á storage configuration:');
  console.log('   const storage = createImportantDocumentsStorage("BR-1234");');
  console.log('');
  console.log('2. ‡∏™‡∏£‡πâ‡∏≤‡∏á multer configuration:');
  console.log('   const multerConfig = createImportantDocumentsMulterConfig("BR-1234");');
  console.log('');
  console.log('3. ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö multer:');
  console.log('   const upload = multer(multerConfig);');
  console.log('');
  console.log('4. ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô route:');
  console.log('   router.post("/upload", upload.array("important_documents", 5), uploadHandler);');
};

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ import ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
if (process.env.NODE_ENV === 'development') {
  console.log('üîß ‡πÇ‡∏´‡∏•‡∏î Cloudinary Storage Configuration...');
  testFilenameGeneration();
  exampleUsage();
} 