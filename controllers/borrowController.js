import * as BorrowModel from '../models/borrowModel.js';
import { saveBase64Image } from '../utils/saveBase64Image.js';
import User from '../models/userModel.js';
import { sendLineNotify } from '../utils/lineNotify.js';
import * as EquipmentModel from '../models/equipmentModel.js'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏ô‡∏µ‡πâ
import { broadcastBadgeCounts } from '../index.js';
import * as RepairRequest from '../models/repairRequestModel.js';
import * as ContactInfoModel from '../models/contactInfoModel.js';
import { createImportantDocumentsUpload } from '../utils/cloudinaryUtils.js';
import path from 'path';
import fs from 'fs';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà
export const createBorrow = async (req, res) => {
  console.log('==== [API] POST /api/borrows ====');
  console.log('payload:', req.body);
  console.log('files:', req.files);
  const { user_id, borrow_date, return_date, items, purpose, borrow_code: existingBorrowCode } = req.body;

  // Parse items if it's a JSON string
  let parsedItems = items;
  if (typeof items === 'string') {
    try {
      parsedItems = JSON.parse(items);
    } catch (error) {
      console.error('Error parsing items JSON:', error);
      return res.status(400).json({ message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• items ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
  }

  // items = [{ item_id, quantity, note }]
  if (!user_id || !borrow_date || !return_date || !Array.isArray(parsedItems) || parsedItems.length === 0) {
    return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö item_id ‡πÉ‡∏ô items ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ undefined
  const invalidItem = parsedItems.find(item => !item.item_id);
  if (invalidItem) {
    return res.status(400).json({ message: 'item_id ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á' });
  }

  // ‡πÉ‡∏ä‡πâ borrow_code ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å middleware ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  let borrow_code;
  if (existingBorrowCode) {
    borrow_code = existingBorrowCode;
    console.log(`Using existing borrow_code: ${borrow_code}`);
  } else if (req.generatedBorrowCode) {
    borrow_code = req.generatedBorrowCode;
    console.log(`Using generated borrow_code from middleware: ${borrow_code}`);
  } else {
    // ‡∏™‡∏∏‡πà‡∏° borrow_code
    function generateBorrowCode() {
      const random = Math.floor(1000 + Math.random() * 9000);
      return `BR-${random}`;
    }
    borrow_code = generateBorrowCode();
    console.log(`Generated new borrow_code: ${borrow_code}`);
  }

  // ‡∏•‡∏ö logic ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥ (findByBorrowCode)
  try {
    // Handle important documents if any
    let importantDocumentsJson = null;
    if (req.files && req.files.length > 0) {
      console.log(`Processing ${req.files.length} important documents for borrow_code: ${borrow_code}`);

      // Process uploaded files (Cloudinary or local storage)
      const documents = [];
      for (const file of req.files) {
        const documentInfo = {
          filename: file.filename || `${borrow_code}_important_documents`,
          original_name: file.originalname,
          file_size: file.size,
          mime_type: file.mimetype
        };

        // Check if file was uploaded to Cloudinary
        if (file.secure_url && file.public_id) {
          // Cloudinary upload
          documentInfo.cloudinary_url = file.secure_url;
          documentInfo.cloudinary_public_id = file.public_id;
          documentInfo.file_path = null;
          console.log(`‚òÅÔ∏è File uploaded to Cloudinary: ${file.originalname} -> ${file.secure_url}`);
        } else if (file.path) {
          // Local storage (fallback)
          documentInfo.file_path = file.path;
          documentInfo.cloudinary_url = null;
          documentInfo.cloudinary_public_id = null;
          documentInfo.stored_locally = true;
          console.log(`üìÅ File stored locally: ${file.originalname} -> ${file.filename}`);
        } else {
          // Memory storage (fallback)
          console.warn('‚ö†Ô∏è File stored in memory - Cloudinary not configured');
          documentInfo.file_path = null;
          documentInfo.cloudinary_url = null;
          documentInfo.cloudinary_public_id = null;
          documentInfo.stored_in_memory = true;
        }

        documents.push(documentInfo);
      }

      importantDocumentsJson = JSON.stringify(documents);
      console.log('Important documents JSON:', importantDocumentsJson);
    } else {
      importantDocumentsJson = null;
    }

    const borrow_id = await BorrowModel.createBorrowTransaction(user_id, borrow_date, return_date, borrow_code, purpose, importantDocumentsJson);
    for (const item of parsedItems) {
      await BorrowModel.addBorrowItem(borrow_id, item.item_id, item.quantity || 1, item.note || null);
    }
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrow ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á)
      const borrow = await BorrowModel.getBorrowById(borrow_id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      const flexMessage = {
        type: 'flex',
        altText: 'üì¢ ‡∏î‡πà‡∏ß‡∏ô! ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        contents: {
          type: 'bubble',
          size: 'mega',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'üö® ‡∏î‡πà‡∏ß‡∏ô! ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà',
                weight: 'bold',
                size: 'xl',
                color: '#ffffff',
                align: 'center',
                margin: 'md',
              }
            ],
            backgroundColor: '#00B900', // LINE green
            paddingAll: '20px',
          },
          body: {
            type: 'box',
            layout: 'vertical',
            spacing: 'md',
            backgroundColor: '#ffffff',
            borderColor: '#e0e0e0',
            borderWidth: '2px',
            cornerRadius: 'lg',
            contents: [
              {
                type: 'text',
                text: '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà',
                weight: 'bold',
                size: 'md',
                color: '#00B900',
                align: 'center',
                margin: 'md',
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrower?.name || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.position || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏™‡∏≤‡∏Ç‡∏≤', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.department || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'text',
                text: 'üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
                size: 'sm',
                color: '#00B900',
                weight: 'bold',
                margin: 'md',
              },
              {
                type: 'text',
                text: equipmentList,
                size: 'sm',
                color: '#222222',
                wrap: true
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                ]
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'button',
                style: 'primary',
                color: '#00B900',
                action: {
                  type: 'uri',
                  label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                  uri: 'https://e-borrow-system.vercel.app/borrows/' + borrow.borrow_code
                }
              }
            ]
          }
        }
      };
      // ‡∏™‡πà‡∏á LINE Notify ‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
      const admins = await User.getAdmins();
      for (const admin of admins) {
        if (admin.line_id && (admin.line_notify_enabled === 1 || admin.line_notify_enabled === true || admin.line_notify_enabled === '1')) {
          await sendLineNotify(admin.line_id, flexMessage);
        }
      }
    } catch (notifyErr) {
      console.error('Error sending LINE notify to admin:', notifyErr);
    }
    // ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    res.status(201).json({ borrow_id, borrow_code });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï badge counts ‡πÅ‡∏ö‡∏ö async (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠)
    setImmediate(async () => {
      try {
        const [pending, carry, pendingApproval] = await Promise.all([
          BorrowModel.getBorrowsByStatus(['pending']),
          BorrowModel.getBorrowsByStatus(['carry']),
          BorrowModel.getBorrowsByStatus(['pending_approval'])
        ]);
        const allRepairs = await RepairRequest.getAllRepairRequests();
        const repairApprovalCount = allRepairs.length;
        broadcastBadgeCounts({
          pendingCount: pending.length + pendingApproval.length,
          carryCount: carry.length,
          borrowApprovalCount: pendingApproval.length,
          repairApprovalCount
        });
      } catch (err) {
        console.error('Error updating badge counts:', err);
      }
    });
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô createBorrow:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllBorrows = async (req, res) => {
  try {
    const rows = await BorrowModel.getAllBorrows();
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
export const getBorrowById = async (req, res) => {
  const { id } = req.params;
  try {
    const borrow = await BorrowModel.getBorrowById(id);
    if (!borrow) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    res.json(borrow);
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
export const updateBorrowStatus = async (req, res) => {
  const { id } = req.params;
  const { status, rejection_reason, signature_image, handover_photo } = req.body;

  console.log('=== updateBorrowStatus Debug ===');
  console.log('borrow_id:', id);
  console.log('status:', status);
  console.log('rejection_reason:', rejection_reason);
  console.log('signature_image exists:', !!signature_image);
  console.log('handover_photo exists:', !!handover_photo);

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrow ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ borrow_code
    const borrow = await BorrowModel.getBorrowById(id);
    if (!borrow) {
      return res.status(404).json({
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        error: 'Borrow not found'
      });
    }

    const borrowCode = borrow.borrow_code;
    console.log('Borrow code:', borrowCode);

    let signaturePath = null;
    let handoverPhotoPath = null;

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå (approved) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (status === 'approved') {
      console.log('=== Processing approved status with images ===');
      console.log('signature_image type:', typeof signature_image);
      console.log('signature_image starts with data:image/:', signature_image?.startsWith('data:image/'));
      console.log('handover_photo type:', typeof handover_photo);
      console.log('handover_photo starts with data:image/:', handover_photo?.startsWith('data:image/'));

      if (signature_image) {
        if (typeof signature_image === 'string' && signature_image.startsWith('data:image/')) {
          console.log('Saving signature image...');
          signaturePath = await saveBase64Image(signature_image, 'uploads/signature', null, borrowCode);
          console.log('signature saved to:', signaturePath);
        } else {
          console.log('Signature image is already a path:', signature_image);
          signaturePath = signature_image; // already a path
        }
      } else {
        console.log('‚ùå No signature_image provided');
      }

      if (handover_photo) {
        if (typeof handover_photo === 'string' && handover_photo.startsWith('data:image/')) {
          console.log('Saving handover photo...');
          handoverPhotoPath = await saveBase64Image(handover_photo, 'uploads/handover_photo', null, borrowCode);
          console.log('handover_photo saved to:', handoverPhotoPath);
        } else {
          console.log('Handover photo is already a path:', handover_photo);
          handoverPhotoPath = handover_photo; // already a path
        }
      } else {
        console.log('‚ùå No handover_photo provided');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      console.log('Final paths - signaturePath:', signaturePath, 'handoverPhotoPath:', handoverPhotoPath);
      if (!signaturePath || !handoverPhotoPath) {
        console.log('ERROR: Missing required images for delivery!');
        return res.status(400).json({
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå',
          error: 'Missing required images'
        });
      }
    }

    console.log('Updating database with status:', status);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const affectedRows = await BorrowModel.updateBorrowStatus(id, status, rejection_reason, signaturePath, handoverPhotoPath);
    console.log('Database update affected rows:', affectedRows);

    if (affectedRows === 0) {
      console.log('ERROR: No rows were updated in database!');
      return res.status(400).json({
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        error: 'No rows affected'
      });
    }

    console.log('Status update completed successfully! Status:', status);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try {
      const updatedBorrow = await BorrowModel.getBorrowById(id);
      console.log('=== Verification after update ===');
      console.log('Updated borrow data:', {
        borrow_id: updatedBorrow?.borrow_id,
        status: updatedBorrow?.status,
        signature_image: updatedBorrow?.signature_image ? 'EXISTS' : 'NULL',
        handover_photo: updatedBorrow?.handover_photo ? 'EXISTS' : 'NULL',
        rejection_reason: updatedBorrow?.rejection_reason || 'NULL'
      });
    } catch (verifyError) {
      console.log('Error during verification:', verifyError);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏õ‡πá‡∏ô '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    if (status === 'rejected') {
      const borrow = await BorrowModel.getBorrowById(id);
      if (borrow && borrow.equipment && Array.isArray(borrow.equipment)) {
        for (const eq of borrow.equipment) {
          await EquipmentModel.updateEquipmentStatus(eq.item_code, '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
      }
    }
    // === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ: ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô pending_approval ===
    if (status === 'pending_approval') {
      const borrow = await BorrowModel.getBorrowById(id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ executive (‡πÄ‡∏î‡∏¥‡∏°)
      const flexMessageExecutive = {
        type: 'flex',
        altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£: ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà',
        contents: {
          type: 'bubble',
          size: 'mega',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'üìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
                weight: 'bold',
                size: 'xl',
                color: '#ffffff',
                align: 'center',
                margin: 'md',
              }
            ],
            backgroundColor: '#1976D2',
            paddingAll: '20px',
          },
          body: {
            type: 'box',
            layout: 'vertical',
            spacing: 'md',
            backgroundColor: '#ffffff',
            borderColor: '#e0e0e0',
            borderWidth: '2px',
            cornerRadius: 'lg',
            contents: [
              {
                type: 'text',
                text: '‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
                weight: 'bold',
                size: 'md',
                color: '#1976D2',
                align: 'center',
                margin: 'md',
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrower?.name || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.position || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏™‡∏≤‡∏Ç‡∏≤', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.department || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'text',
                text: 'üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
                size: 'sm',
                color: '#1976D2',
                weight: 'bold',
                margin: 'md',
              },
              {
                type: 'text',
                text: equipmentList,
                size: 'sm',
                color: '#222222',
                wrap: true
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                ]
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'button',
                style: 'primary',
                color: '#1976D2',
                action: {
                  type: 'uri',
                  label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                  uri: 'https://e-borrow-system.vercel.app'
                }
              }
            ]
          }
        }
      };
      // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ executive
      const executives = await User.getExecutives();
      for (const executive of executives) {
        if (executive.line_id && (executive.line_notify_enabled === 1 || executive.line_notify_enabled === true || executive.line_notify_enabled === '1')) {
          await sendLineNotify(executive.line_id, flexMessageExecutive);
        }
      }
      // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ user (‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°)
      // ‡∏î‡∏∂‡∏á line_id ‡∏à‡∏≤‡∏Å user_id ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const user = await User.findById(borrow.user_id);
      if (user?.line_id && (user.line_notify_enabled === 1 || user.line_notify_enabled === true || user.line_notify_enabled === '1')) {
        const flexMessageUser = {
          type: 'flex',
          altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          contents: {
            type: 'bubble',
            size: 'mega',
            header: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: 'üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                  weight: 'bold',
                  size: 'xl',
                  color: '#ffffff',
                  align: 'center',
                  margin: 'md',
                }
              ],
              backgroundColor: '#009688',
              paddingAll: '20px',
            },
            body: {
              type: 'box',
              layout: 'vertical',
              spacing: 'md',
              backgroundColor: '#ffffff',
              borderColor: '#e0e0e0',
              borderWidth: '2px',
              cornerRadius: 'lg',
              contents: [
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
                  weight: 'bold',
                  size: 'md',
                  color: '#009688',
                  align: 'center',
                  margin: 'md',
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                    { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                  ]
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°:',
                  size: 'sm',
                  color: '#009688',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: equipmentList,
                  size: 'sm',
                  color: '#222222',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  color: '#009688',
                  action: {
                    type: 'uri',
                    label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    uri: 'https://e-borrow-system.vercel.app'
                  }
                }
              ]
            }
          }
        };
        console.log('[DEBUG] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user:', user.user_id, user.line_id);
        console.log('[DEBUG] flexMessageUser:', JSON.stringify(flexMessageUser));
        try {
          await sendLineNotify(user.line_id, flexMessageUser);
          console.log('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err) {
          console.error('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
        }
      }
    }
    // === ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô carry (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß) ===
    if (status === 'carry') {
      console.log('[DEBUG] === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á LINE Notify ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö carry ===');
      const borrow = await BorrowModel.getBorrowById(id);
      console.log('[DEBUG] borrow data:', JSON.stringify(borrow, null, 2));

      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      const user = await User.findById(borrow.user_id);
      console.log('[DEBUG] user data:', {
        user_id: user?.user_id,
        line_id: user?.line_id,
        line_notify_enabled: user?.line_notify_enabled,
        type: typeof user?.line_notify_enabled
      });

             if (user?.line_id && (user.line_notify_enabled === 1 || user.line_notify_enabled === true || user.line_notify_enabled === '1')) {
         console.log('[DEBUG] ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô - ‡∏à‡∏∞‡∏™‡πà‡∏á LINE Notify');

         // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Database
         let contactText = '‚Ä¢ ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 1 ‡∏ä‡∏±‡πâ‡∏ô 2\n‚Ä¢ ‡πÇ‡∏ó‡∏£: 02-123-4567\n‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: 8:30-16:30 ‡∏ô.';
         try {
           const contactInfoResult = await ContactInfoModel.getContactInfo();
           console.log('[DEBUG] Contact info result:', contactInfoResult);

           if (contactInfoResult && contactInfoResult.success && contactInfoResult.data) {
             const contactInfo = contactInfoResult.data;
             contactText = `‚Ä¢ ${contactInfo.location}\n‚Ä¢ ‡πÇ‡∏ó‡∏£: ${contactInfo.phone}\n‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${contactInfo.hours}`;
             console.log('[DEBUG] Contact text generated:', contactText);
           } else {
             console.log('[DEBUG] No contact info found, using default');
           }
         } catch (error) {
           console.error('Error getting contact info:', error);
         }

         // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏´‡πâ‡∏≠‡∏á
         const equipmentWithRoom = borrow.equipment.map(eq => {
          const roomText = eq.room_name
            ? `${eq.room_name}${eq.room_code ? ' (' + eq.room_code + ')' : ''}`
            : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á';
          return {
            type: 'text',
            text: `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity} ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà: ${roomText}`,
            size: 'sm',
            color: '#222222',
            wrap: true
          };
        });
        const flexMessageUser = {
          type: 'flex',
          altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          contents: {
            type: 'bubble',
            size: 'mega',
            header: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: 'üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                  weight: 'bold',
                  size: 'xl',
                  color: '#ffffff',
                  align: 'center',
                  margin: 'md',
                }
              ],
              backgroundColor: '#388e3c',
              paddingAll: '20px',
            },
            body: {
              type: 'box',
              layout: 'vertical',
              spacing: 'md',
              backgroundColor: '#ffffff',
              borderColor: '#e0e0e0',
              borderWidth: '2px',
              cornerRadius: 'lg',
              contents: [
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ',
                  weight: 'bold',
                  size: 'md',
                  color: '#388e3c',
                  align: 'center',
                  margin: 'md',
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                    { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                  ]
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå:',
                  size: 'sm',
                  color: '#388e3c',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö:',
                  size: 'sm',
                  color: '#388e3c',
                  weight: 'bold',
                  margin: 'md',
                },
                ...equipmentWithRoom,
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:',
                  size: 'sm',
                  color: '#388e3c',
                  weight: 'bold',
                  margin: 'md',
                },
                                 {
                   type: 'text',
                   text: contactText,
                   size: 'sm',
                   color: '#222222',
                   wrap: true
                 }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  color: '#388e3c',
                  action: {
                    type: 'uri',
                    label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    uri: 'https://e-borrow-system.vercel.app'
                  }
                }
              ]
            }
          }
        };
        console.log('[DEBUG] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user (carry):', user.user_id, user.line_id);
        console.log('[DEBUG] flexMessageUser (carry):', JSON.stringify(flexMessageUser));
        try {
          await sendLineNotify(user.line_id, flexMessageUser);
          console.log('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user (carry) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err) {
          console.error('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user (carry) ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
        }
      } else {
        console.log('[DEBUG] ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á LINE Notify');
        console.log('[DEBUG] ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:');
        console.log('  - line_id exists:', !!user?.line_id);
        console.log('  - line_notify_enabled value:', user?.line_notify_enabled);
        console.log('  - line_notify_enabled type:', typeof user?.line_notify_enabled);
        console.log('  - line_notify_enabled === 1:', user?.line_notify_enabled === 1);
        console.log('  - line_notify_enabled === true:', user?.line_notify_enabled === true);
        console.log('  - line_notify_enabled === "1":', user?.line_notify_enabled === '1');
      }
    }
    // === ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô rejected (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥) ===
    if (status === 'rejected') {
      const borrow = await BorrowModel.getBorrowById(id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      const user = await User.findById(borrow.user_id);
      if (
        user?.line_id &&
        (user.line_notify_enabled === 1 || user.line_notify_enabled === true || user.line_notify_enabled === '1')
      ) {
        const flexMessageUser = {
          type: 'flex',
          altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          contents: {
            type: 'bubble',
            size: 'mega',
            header: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: '‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
                  weight: 'bold',
                  size: 'xl',
                  color: '#ffffff',
                  align: 'center',
                  margin: 'md',
                }
              ],
              backgroundColor: '#d32f2f',
              paddingAll: '20px',
            },
            body: {
              type: 'box',
              layout: 'vertical',
              spacing: 'md',
              backgroundColor: '#ffffff',
              borderColor: '#e0e0e0',
              borderWidth: '2px',
              cornerRadius: 'lg',
              contents: [
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
                  weight: 'bold',
                  size: 'md',
                  color: '#d32f2f',
                  align: 'center',
                  margin: 'md',
                },
                ...(borrow.rejection_reason ? [{
                  type: 'text',
                  text: '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ' + borrow.rejection_reason,
                  size: 'sm',
                  color: '#d32f2f',
                  margin: 'md',
                  wrap: true
                }] : []),
                {
                  type: 'text',
                  text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
                  size: 'sm',
                  color: '#d32f2f',
                  weight: 'bold',
                  align: 'center',
                  margin: 'md',
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                    { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                  ]
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°:',
                  size: 'sm',
                  color: '#d32f2f',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: equipmentList,
                  size: 'sm',
                  color: '#222222',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  color: '#d32f2f',
                  action: {
                    type: 'uri',
                    label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    uri: 'https://e-borrow-system.vercel.app'
                  }
                }
              ]
            }
          }
        };
        await sendLineNotify(user.line_id, flexMessageUser);
      }
    }
    // ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö waiting_payment ‡πÅ‡∏•‡∏∞ completed ‡∏≠‡∏≠‡∏Å (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ handle ‡∏ó‡∏µ‡πà returnController.js ‡πÅ‡∏•‡πâ‡∏ß)
    // === ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö completed (‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô returnController.js) ===

    // ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ borrow ‡πÉ‡∏´‡πâ query count ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß broadcast
    const [pending, carry, pendingApproval] = await Promise.all([
      BorrowModel.getBorrowsByStatus(['pending']),
      BorrowModel.getBorrowsByStatus(['carry']),
      BorrowModel.getBorrowsByStatus(['pending_approval'])
    ]);
    const allRepairs = await RepairRequest.getAllRepairRequests();
    const repairApprovalCount = allRepairs.length;
    broadcastBadgeCounts({
      pendingCount: pending.length + pendingApproval.length, // ‡∏£‡∏ß‡∏° pending + pending_approval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
      carryCount: carry.length,
      borrowApprovalCount: pendingApproval.length, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö executive
      repairApprovalCount
    });

    res.json({ affectedRows, signaturePath, handoverPhotoPath });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
export const deleteBorrow = async (req, res) => {
  const { id } = req.params;
  try {
    await BorrowModel.deleteBorrow(id);
    res.json({ message: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};