
import bcrypt from 'bcrypt';
import fs from 'fs';
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from 'url';
import User from '../models/userModel.js';
import { sendMail } from '../utils/emailUtils.js';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö OTP ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡πÉ‡∏ô production ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ redis ‡∏´‡∏£‡∏∑‡∏≠ db)
const otpStore = new Map();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö OTP ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å OTP ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
const registerOtpStore = new Map();

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö login attempts ‡πÅ‡∏•‡∏∞ device tracking
const loginAttempts = new Map();
const activeSessions = new Map();

// JWT Secret - ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variable
const JWT_SECRET = process.env.JWT_SECRET;
const REFRESH_SECRET = process.env.REFRESH_SECRET || (JWT_SECRET + '_refresh');
if (!JWT_SECRET || JWT_SECRET === 'your_jwt_secret_key') {
  console.error('‚ö†Ô∏è WARNING: JWT_SECRET not properly configured!');
  console.error('Please set JWT_SECRET environment variable');
  process.exit(1);
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á device fingerprint
function generateDeviceFingerprint(req) {
  const userAgent = req.headers['user-agent'] || '';

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á IP Address ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  let ip = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'] || 'unknown';

  // ‡πÅ‡∏õ‡∏•‡∏á IPv6 localhost ‡πÄ‡∏õ‡πá‡∏ô IPv4
  if (ip === '::1' || ip === '::ffff:127.0.0.1') {
    ip = '127.0.0.1 (localhost)';
  } else if (ip.startsWith('::ffff:')) {
    ip = ip.replace('::ffff:', '');
  }

  const acceptLanguage = req.headers['accept-language'] || '';
  const acceptEncoding = req.headers['accept-encoding'] || '';

  const fingerprint = crypto
    .createHash('sha256')
    .update(`${userAgent}${ip}${acceptLanguage}${acceptEncoding}`)
    .digest('hex');

  return {
    fingerprint,
    userAgent,
    ip,
    timestamp: Date.now()
  };
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login attempts
function checkLoginAttempts(username, ip) {
  const key = `${username}:${ip}`;
  const attempts = loginAttempts.get(key) || { count: 0, lastAttempt: 0, blockedUntil: 0 };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (attempts.blockedUntil > Date.now()) {
    const remainingTime = Math.ceil((attempts.blockedUntil - Date.now()) / 1000 / 60);
    throw new Error(`‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô ${remainingTime} ‡∏ô‡∏≤‡∏ó‡∏µ`);
  }

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ 15 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß
  if (Date.now() - attempts.lastAttempt > 15 * 60 * 1000) {
    attempts.count = 0;
  }

  return attempts;
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï login attempts
function updateLoginAttempts(username, ip, success = false) {
  const key = `${username}:${ip}`;
  const attempts = loginAttempts.get(key) || { count: 0, lastAttempt: 0, blockedUntil: 0 };

  if (success) {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    loginAttempts.delete(key);
  } else {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
    attempts.count += 1;
    attempts.lastAttempt = Date.now();

    // ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if (attempts.count >= 5) {
      attempts.blockedUntil = Date.now() + (15 * 60 * 1000); // ‡∏ö‡∏•‡πá‡∏≠‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    }

    loginAttempts.set(key, attempts);
  }
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å API
async function getContactInfo() {
  const defaultContactInfo = {
    email: 'support@it.msu.ac.th',
    phone: '043-754-321',
    hours: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 8:30-16:30 ‡∏ô.',
    location: '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°'
  };

  try {
    const ContactInfoModel = await import('../models/contactInfoModel.js');
    const result = await ContactInfoModel.getContactInfo();
    if (result.success && result.data) {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• contact_info
      return {
        email: defaultContactInfo.email, // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        phone: result.data.phone || defaultContactInfo.phone,
        hours: result.data.hours || defaultContactInfo.hours,
        location: result.data.location || defaultContactInfo.location
      };
    }
  } catch (error) {
    console.error('Error fetching contact info:', error);
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error
  }

  return defaultContactInfo;
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô login ‡πÉ‡∏´‡∏°‡πà
async function sendLoginNotification(user, deviceInfo, isNewDevice = false) {
  try {
    const subject = isNewDevice ? 'üîê ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà' : 'üîê ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
    const brandLogo = '';
    const currentTime = new Date(deviceInfo.timestamp).toLocaleString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZone: 'Asia/Bangkok'
    });

    // ‡πÅ‡∏¢‡∏Å User Agent ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    const userAgent = deviceInfo.userAgent;
    const browserInfo = userAgent.includes('Chrome') ? 'Google Chrome' :
                       userAgent.includes('Firefox') ? 'Mozilla Firefox' :
                       userAgent.includes('Safari') ? 'Safari' :
                       userAgent.includes('Edge') ? 'Microsoft Edge' :
                       userAgent.includes('Opera') ? 'Opera' : 'Unknown Browser';

    const osInfo = userAgent.includes('Windows') ? 'Windows' :
                   userAgent.includes('Mac') ? 'macOS' :
                   userAgent.includes('Linux') ? 'Linux' :
                   userAgent.includes('Android') ? 'Android' :
                   userAgent.includes('iOS') ? 'iOS' : 'Unknown OS';

    const deviceInfoText = `
      üåê ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå: ${browserInfo}
      üíª ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£: ${osInfo}
      üìç IP Address: ${deviceInfo.ip}
      üïê ‡πÄ‡∏ß‡∏•‡∏≤: ${currentTime}
    `;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å API
    const contactInfo = await getContactInfo();

    const emailHtml = `
      <!DOCTYPE html>
      <html lang="th">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</title>
        <style>
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
          }
          .container {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #e9ecef;
          }
          .header {
            text-align: center;
            background: linear-gradient(135deg, #1e3a8a, #2563eb);
            color: #ffffff;
            padding: 30px 20px;
            margin-bottom: 30px;
            border-bottom: 5px solid #3b82f6;
          }
          .logo {
            width: 80px;
            height: 80px;
            background: #ffffff;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            color: #2563eb;
            font-size: 36px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
          }
          .title {
            color: #ffffff;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
          }
          .subtitle {
            color: rgba(255, 255, 255, 0.9);
            font-size: 16px;
            margin: 10px 0 0 0;
          }
          .greeting {
            font-size: 18px;
            color: #495057;
            margin-bottom: 25px;
          }
          .alert-box {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border: 2px solid #ffc107;
            border-radius: 10px;
            padding: 20px;
            margin: 25px 0;
            position: relative;
          }
          .alert-icon {
            position: absolute;
            top: -15px;
            left: 20px;
            background: #ffc107;
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
          }
          .device-info {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
          }
          .info-item {
            display: flex;
            align-items: center;
            margin: 10px 0;
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
          }
          .info-item:last-child {
            border-bottom: none;
          }
          .info-icon {
            width: 24px;
            margin-right: 12px;
            color: #2563eb;
            font-size: 16px;
          }
          .info-label {
            font-weight: bold;
            color: #495057;
            min-width: 120px;
          }
          .info-value {
            color: #6c757d;
            flex: 1;
          }
          .warning-box {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            border: 2px solid #dc3545;
            border-radius: 10px;
            padding: 20px;
            margin: 25px 0;
            text-align: center;
          }
          .warning-icon {
            font-size: 24px;
            color: #dc3545;
            margin-bottom: 10px;
          }
          .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            color: #6c757d;
            font-size: 14px;
          }
          .contact-info {
            background: #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
          }
          .btn {
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(135deg, #2563eb, #1e40af);
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
            margin: 10px 5px;
            transition: all 0.3s ease;
          }
          .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(37, 99, 235, 0.3);
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üîê</div>
            <h1 class="title">‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</h1>
            <p class="subtitle">‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</p>
          </div>

          <div class="greeting">
            ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ <strong>${user.Fullname}</strong>
          </div>

          <div class="alert-box">
            <div class="alert-icon">‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</div>
            <h2 style="color: #856404; margin-top: 20px;">
              ${isNewDevice ? 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà' : 'üîê ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
            </h2>
            <p style="color: #856404; margin: 15px 0;">
              ${isNewDevice ?
                '‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ' :
                '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'
              }
            </p>
          </div>

          <div class="device-info">
            <h3 style="color: #495057; margin-top: 0; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
              üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </h3>
            <div class="info-item">
              <span class="info-icon">üåê</span>
              <span class="info-label">‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå:</span>
              <span class="info-value">${browserInfo}</span>
            </div>
            <div class="info-item">
              <span class="info-icon">üíª</span>
              <span class="info-label">‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£:</span>
              <span class="info-value">${osInfo}</span>
            </div>
            <div class="info-item">
              <span class="info-icon">üìç</span>
              <span class="info-label">IP Address:</span>
              <span class="info-value">${deviceInfo.ip}</span>
            </div>
            <div class="info-item">
              <span class="info-icon">üïê</span>
              <span class="info-label">‡πÄ‡∏ß‡∏•‡∏≤:</span>
              <span class="info-value">${currentTime}</span>
            </div>
          </div>

          ${isNewDevice ? `
          <div class="warning-box">
            <div class="warning-icon">üö®</div>
            <h3 style="color: #721c24; margin: 10px 0;">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</h3>
            <p style="color: #721c24; margin: 0;">
              ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            </p>
          </div>
          ` : ''}

          <div class="contact-info">
            <h4 style="color: #495057; margin: 0 0 10px 0;">üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h4>
            <p style="margin: 5px 0;">
              <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> ${contactInfo.location}<br>
              <strong>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> ${contactInfo.phone}<br>
              <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:</strong> ${contactInfo.hours}
            </p>
          </div>

          <div style="text-align: center; margin: 25px 0;">
            <a href="mailto:${contactInfo.email}" class="btn">üìß ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</a>
            <a href="https://it.msu.ac.th" class="btn">üåê ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</a>
          </div>

          <div class="footer">
            <p>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
            <p>üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
            <p style="font-size: 12px; color: #adb5bd;">
              ¬© 2025 ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°<br>
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0
            </p>
          </div>
        </div>
      </body>
      </html>
    `;

    const emailText = `
üîê ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°

‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.Fullname},

${isNewDevice ? 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà' : 'üîê ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}

${deviceInfoText}

${isNewDevice ?
  '‚ö†Ô∏è  ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ' :
  '‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'
}

üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö:
   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${contactInfo.location}
   ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${contactInfo.phone}
   ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ${contactInfo.hours}

üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

---
¬© 2025 ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0
    `;

    await sendMail({
      to: user.email,
      subject: subject,
      text: emailText,
      html: emailHtml
    });
  } catch (error) {
    console.error('Error sending login notification:', error);
  }
}

// POST /api/users/request-otp
// ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function requestRegisterOtp(req, res) {
  try {
    const { contact } = req.body;
    if (!contact || !/@msu\.ac\.th$/.test(contact)) {
      return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏• @msu.ac.th ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á otp 6 ‡∏´‡∏•‡∏±‡∏Å
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    registerOtpStore.set(contact, { otp, expires: Date.now() + 5 * 60 * 1000 });
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å API
    const contactInfo = await getContactInfo();

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const brandLogo = '';
    const emailHtml = `
      <!DOCTYPE html>
      <html lang="th">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</title>
        <style>
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
          }
          .container {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #e9ecef;
          }
          .header {
            text-align: center;
            border-bottom: 3px solid #28a745;
            padding-bottom: 20px;
            margin-bottom: 30px;
          }
          .logo {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #28a745, #20c997);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            color: white;
            font-size: 32px;
            font-weight: bold;
          }
          .title {
            color: #28a745;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
          }
          .subtitle {
            color: #6c757d;
            font-size: 16px;
            margin: 10px 0 0 0;
          }
          .otp-box {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border: 2px solid #28a745;
            border-radius: 10px;
            padding: 30px;
            margin: 25px 0;
            text-align: center;
          }
          .otp-code {
            font-size: 48px;
            font-weight: bold;
            color: #155724;
            letter-spacing: 8px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
          }
          .info-box {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
          }
          .warning-box {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border: 2px solid #ffc107;
            border-radius: 10px;
            padding: 20px;
            margin: 25px 0;
            text-align: center;
          }
          .contact-info {
            background: #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
          }
          .footer {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            color: #6c757d;
            font-size: 14px;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üìß</div>
            <h1 class="title">‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</h1>
            <p class="subtitle">‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</p>
          </div>

          <h2 style="color: #495057; text-align: center;">üîê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>

          <div class="otp-box">
            <h3 style="color: #155724; margin: 0 0 15px 0;">‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
            <div class="otp-code">${otp}</div>
            <p style="color: #155724; margin: 15px 0 0 0; font-size: 16px;">
              ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            </p>
          </div>

          <div class="info-box">
            <h4 style="color: #495057; margin: 0 0 15px 0;">üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h4>
            <ol style="color: #6c757d; margin: 0; padding-left: 20px;">
              <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</li>
              <li>‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</li>
              <li>‡∏ß‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</li>
              <li>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</li>
            </ol>
          </div>

          <div class="warning-box">
            <h4 style="color: #856404; margin: 0 0 10px 0;">‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á</h4>
            <p style="color: #856404; margin: 0;">
              ‚Ä¢ ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô<br>
              ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô<br>
              ‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            </p>
          </div>

          <div class="contact-info">
            <h4 style="color: #495057; margin: 0 0 10px 0;">üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h4>
            <p style="margin: 5px 0;">
              <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> ${contactInfo.location}<br>
              <strong>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> ${contactInfo.phone}<br>
              <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:</strong> ${contactInfo.hours}
            </p>
          </div>

          <div class="footer">
            <p>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
            <p>üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
            <p style="font-size: 12px; color: #adb5bd;">
              ¬© 2025 ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°<br>
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0
            </p>
          </div>
        </div>
      </body>
      </html>
    `;

    const emailText = `
üìß OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°

üîê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å

‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${otp}

‚è∞ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
2. ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
3. ‡∏ß‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
4. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠

‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:
‚Ä¢ ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô
‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö:
   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${contactInfo.location}
   ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${contactInfo.phone}
   ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ${contactInfo.hours}

üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

---
¬© 2025 ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0
    `;

    await sendMail({
      to: contact,
      subject: 'üìß OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå',
      text: emailText,
      html: emailHtml
    });
    res.json({ message: '‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP', error: err.message });
  }
}

// POST /api/users/verify-otp
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function verifyRegisterOtp(req, res) {
  try {
    const { contact, otp } = req.body;
    if (!contact || !otp) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
    }
    const record = registerOtpStore.get(contact);
    if (!record) {
      return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
    }
    if (record.otp !== otp) {
      return res.status(400).json({ message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    if (Date.now() > record.expires) {
      registerOtpStore.delete(contact);
      return res.status(400).json({ message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
    }
    // OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    registerOtpStore.delete(contact);
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP', error: err.message });
  }
}



// Configure multer for image upload
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, '../uploads');
    // Create directory if it doesn't exist
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  // ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô filename function ‡∏Ç‡∏≠‡∏á userController.js
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°:
filename: function (req, file, cb) {
  // Get user_code from request body
  const userCode = req.body.user_code;
  console.log('Received user_code:', userCode); // Debug log
  if (!userCode) {
    return cb(new Error('User code is required'));
  }
  // ‡πÉ‡∏ä‡πâ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
  const extension = path.extname(file.originalname).toLowerCase();
  const filename = `${userCode}${extension}`;
  console.log('Generated filename:', filename); // Debug log
  cb(null, filename);
}
});

// File filter for image upload
const fileFilter = (req, file, cb) => {
  // Accept only jpg and png
  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {
    cb(null, true);
  } else {
    cb(new Error('Only .jpg and .png files are allowed!'), false);
  }
};

// Configure multer upload
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 2 * 1024 * 1024 // 2MB limit
  }
}).single('avatar');

const userController = {
  // POST /api/users/reset-password
  resetPassword: async (req, res) => {
    try {
      const { email, otp, password } = req.body;
      if (!email || !otp || !password) {
        return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
      }
      const record = otpStore.get(email);
      if (!record) {
        return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
      }
      if (record.otp !== otp) {
        return res.status(400).json({ message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }
      if (Date.now() > record.expires) {
        otpStore.delete(email);
        return res.status(400).json({ message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
      }
      // Hash new password
      const hashedPassword = await bcrypt.hash(password, 10);
      // Update user password
      const user = await User.findByEmail(email);
      if (!user) {
        return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
      }
      await User.update(user.user_id, { password: hashedPassword });
      otpStore.delete(email);
      res.json({ success: true, message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', error: err.message });
    }
  },
  // POST /api/users/verify-otp (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
  verifyPasswordOtp: async (req, res) => {
    try {
      const { email, otp } = req.body;
      if (!email || !otp) {
        return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
      }
      const record = otpStore.get(email);
      if (!record) {
        return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
      }
      if (record.otp !== otp) {
        return res.status(400).json({ message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }
      if (Date.now() > record.expires) {
        otpStore.delete(email);
        return res.status(400).json({ message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
      }
      // OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      // ‡πÑ‡∏°‡πà‡∏•‡∏ö otpStore ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      res.json({ success: true });
    } catch (err) {
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP', error: err.message });
    }
  },
  // POST /api/users/request-otp (‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å)
  requestRegisterOtp,
  // POST /api/users/verify-otp (‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å)
  verifyRegisterOtp,
  // POST /api/users/request-password-otp
  requestPasswordOtp: async (req, res) => {
    try {
      const { email } = req.body;
      if (!email) return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' });
      // ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const user = await User.findByEmail(email);
      if (!user) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á otp 6 ‡∏´‡∏•‡∏±‡∏Å
      const otp = Math.floor(100000 + Math.random() * 900000).toString();
      otpStore.set(email, { otp, expires: Date.now() + 5 * 60 * 1000 });

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å API
      const contactInfo = await getContactInfo();

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailHtml = `
      <!DOCTYPE html>
      <html lang="th">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</title>
        <style>
          /* Base Styles */
          body {
            font-family: 'Segoe UI', 'Tahoma', 'Geneva', 'Verdana', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 0;
            background-color: #f8fafc;
          }

          /* Container */
          .container {
            background: white;
            border-radius: 12px;
            padding: 0;
            box-shadow: 0 4px 20px rgba(0, 75, 150, 0.1);
            border: 1px solid #e0e7ff;
            overflow: hidden;
          }

          /* Header */
          .header {
            background: linear-gradient(135deg, #1e3a8a, #2563eb);
            color: white;
            padding: 30px 20px;
            text-align: center;
            border-bottom: 5px solid #3b82f6;
          }

          .logo {
            width: 80px;
            height: 80px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            color: #2563eb;
            font-size: 36px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          }

          .title {
            color: white;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
          }

          .subtitle {
            color: rgba(255, 255, 255, 0.9);
            font-size: 16px;
            margin: 10px 0 0 0;
          }

          /* Content */
          .content {
            padding: 30px;
          }

          /* OTP Box */
          .otp-box {
            background: #f0f7ff;
            border: 2px solid #3b82f6;
            border-radius: 12px;
            padding: 25px;
            margin: 25px 0;
            text-align: center;
          }

          .otp-code {
            font-size: 42px;
            font-weight: bold;
            color: #1e40af;
            letter-spacing: 8px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            background: white;
            padding: 10px;
            border-radius: 8px;
            display: inline-block;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
          }

          /* Info Box */
          .info-box {
            background: #f8fafc;
            border: 1px solid #e0e7ff;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
          }

          .info-box h4 {
            color: #1e3a8a;
            margin-top: 0;
            border-bottom: 2px solid #e0e7ff;
            padding-bottom: 10px;
          }

          .info-box ol {
            color: #4b5563;
            margin: 0;
            padding-left: 20px;
          }

          .info-box li {
            margin-bottom: 8px;
          }

          /* Warning Box */
          .warning-box {
            background: #fff7ed;
            border: 2px solid #f97316;
            border-radius: 10px;
            padding: 20px;
            margin: 25px 0;
          }

          .warning-box h4 {
            color: #9a3412;
            margin-top: 0;
          }

          .warning-box p {
            color: #9a3412;
            margin: 0;
          }

          /* Contact Info */
          .contact-info {
            background: #f0f7ff;
            border-radius: 10px;
            padding: 20px;
            margin: 25px 0;
          }

          .contact-info h4 {
            color: #1e3a8a;
            margin-top: 0;
          }

          /* Footer */
          .footer {
            text-align: center;
            padding: 20px;
            background: #f8fafc;
            border-top: 1px solid #e0e7ff;
            color: #64748b;
            font-size: 14px;
          }

          /* Responsive */
          @media (max-width: 480px) {
            .container {
              border-radius: 0;
            }

            .content {
              padding: 20px;
            }

            .otp-code {
              font-size: 32px;
              letter-spacing: 5px;
            }
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üîê</div>
            <h1 class="title">‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</h1>
            <p class="subtitle">‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</p>
          </div>

          <div class="content">
            <h2 style="color: #1e3a8a; text-align: center; margin-top: 0;">üîê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>

            <div class="otp-box">
              <h3 style="color: #1e3a8a; margin: 0 0 15px 0;">‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
              <div class="otp-code">${otp}</div>
              <p style="color: #1e3a8a; margin: 15px 0 0 0; font-size: 16px;">
                ‚è∞ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
              </p>
            </div>

            <div class="info-box">
              <h4>üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h4>
              <ol>
                <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</li>
                <li>‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</li>
                <li>‡∏ß‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</li>
                <li>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠</li>
              </ol>
            </div>

            <div class="warning-box">
              <h4>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á</h4>
              <p>
                ‚Ä¢ ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô<br>
                ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô<br>
                ‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </p>
            </div>

            <div class="contact-info">
              <h4>üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h4>
              <p style="margin: 5px 0;">
                <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> ${contactInfo.location}<br>
                <strong>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> ${contactInfo.phone}<br>
                <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:</strong> ${contactInfo.hours}
              </p>
            </div>
          </div>

          <div class="footer">
            <p>üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
            <p>üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</p>
            <p style="font-size: 12px; color: #94a3b8;">
              ¬© ${new Date().getFullYear()} ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°<br>
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0
            </p>
          </div>
        </div>
      </body>
      </html>
      `;

      const emailText = `
      üìß OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
      ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°

      üîê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å

      ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${otp}

      ‚è∞ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ

      üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
      1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
      2. ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
      3. ‡∏ß‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      4. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠

      ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:
      ‚Ä¢ ‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô
      ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      ‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

      üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö:
         ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${contactInfo.location}
         ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${contactInfo.phone}
         ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ${contactInfo.hours}

      üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

      ---
      ¬© ${new Date().getFullYear()} ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
      ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå | ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0
      `;

      await sendMail({
        to: email,
        subject: 'üîë OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå',
        text: emailText,
        html: emailHtml
      });
      res.json({ message: '‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß' });
    } catch (err) {
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP', error: err.message });
    }
  },
  getAllUsers: async (req, res) => {
    try {
      const users = await User.findAll();
      res.json(users);
    } catch (err) {
      console.error('Error fetching users:', err);
      res.status(500).json({
        message: 'An error occurred while fetching users',
        error: err.message
      });
    }
  },

  getUserByUsername: async (req, res) => {
    try {
      const username = req.params.username;
      const user = await User.findByUsername(username);
      res.json(user);
    } catch (err) {
      console.error('Error fetching user:', err);
      res.status(500).json({
        message: 'An error occurred while fetching user',
        error: err.message
      });
    }
  },

  getUserById: async (req, res) => {
    try {
      const userId = req.params.id;
      const user = await User.findById(userId);

      if (!user) {
        return res.status(404).json({
          message: 'User not found',
          error: 'No user found with the provided ID'
        });
      }

      // ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏´‡πâ frontend ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
      const userOut = {
        ...user,
        position: user.position_id ? { id: user.position_id, name: user.position_name } : null,
        branch: user.branch_id ? { id: user.branch_id, name: user.branch_name } : null
      };

      res.json(userOut);
    } catch (err) {
      console.error('Error fetching user:', err);
      res.status(500).json({
        message: 'An error occurred while fetching user',
        error: err.message
      });
    }
  },

  login: async (req, res) => {
    try {
      const { username, password } = req.body;
      if (!username || !password) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });
      }
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° validation username: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô a-zA-Z0-9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const usernamePattern = /^[a-zA-Z0-9]+$/;
      if (!usernamePattern.test(username)) {
        return res.status(400).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login attempts
      const ip = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'] || 'unknown';
      try {
        checkLoginAttempts(username, ip);
      } catch (error) {
        updateLoginAttempts(username, ip, false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
        return res.status(401).json({ message: error.message });
      }

      const user = await User.findByUsername(username);
      if (!user) {
        updateLoginAttempts(username, ip, false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
        return res.status(401).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
      }

      // Debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å database
      console.log('=== Debug: User data from database ===');
      console.log('Full user object:', user);
      console.log('branch_name from DB:', user.branch_name);
      console.log('position_name from DB:', user.position_name);
      console.log('branch_id from DB:', user.branch_id);
      console.log('position_id from DB:', user.position_id);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (hash)
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        updateLoginAttempts(username, ip, false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
        return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend
      let role = 'user';
      if (user.role_name && user.role_name.toLowerCase().includes('admin')) role = 'admin';
      else if (user.role_name && user.role_name.toLowerCase().includes('executive')) role = 'executive';

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á device fingerprint
      const deviceInfo = generateDeviceFingerprint(req);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const userSessions = activeSessions.get(user.user_id) || [];
      const isNewDevice = !userSessions.some(session => session.fingerprint === deviceInfo.fingerprint);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Access Token ‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞ Refresh Token ‡πÉ‡∏ô‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
      const token = jwt.sign({
        user_id: user.user_id,
        username: user.username,
        role,
        deviceFingerprint: deviceInfo.fingerprint,
        loginTime: Date.now()
      }, JWT_SECRET, { expiresIn: '45m' });

      const refreshToken = jwt.sign({ user_id: user.user_id, tokenId: crypto.randomUUID() }, REFRESH_SECRET, { expiresIn: '7d' });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡πÉ‡∏´‡∏°‡πà
      const newSession = {
        token,
        deviceInfo,
        loginTime: Date.now(),
        lastActivity: Date.now()
      };

      userSessions.push(newSession);
      activeSessions.set(user.user_id, userSessions);

      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
      if (isNewDevice) {
        sendLoginNotification(user, deviceInfo, true);
      }

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï login attempts ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      updateLoginAttempts(username, ip, true);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° password) + token + ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const { user_id, user_code, username: userUsername, Fullname, email, phone, avatar, street, parish, district, province, postal_no, branch_name, position_name } = user;
      console.log('LOGIN RESPONSE:', {
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        token,
        user: {
          user_id,
          user_code,
          username: userUsername,
          Fullname,
          email,
          phone,
          avatar,
          street,
          parish,
          district,
          province,
          postal_no,
          branch_name,
          position_name,
          role
        }
      });
      // ‡πÄ‡∏ã‡πá‡∏ï HttpOnly Secure Cookie ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh token
      res.cookie('refresh_token', refreshToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        path: '/api/users/auth/refresh',
        maxAge: 7 * 24 * 60 * 60 * 1000
      });

      res.json({
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        token,
        user: {
          user_id,
          user_code,
          username: userUsername,
          Fullname,
          email,
          phone,
          avatar,
          street,
          parish,
          district,
          province,
          postal_no,
          branch_name,
          position_name,
          role
        }
      });
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', error: error.message });
    }
  },

  // POST /api/users/verify-password
  verifyPassword: async (req, res) => {
    try {
      const { password } = req.body;
      const user_id = req.user.user_id; // ‡∏à‡∏≤‡∏Å JWT token

      if (!password) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
      }

      const user = await User.findById(user_id);
      if (!user) {
        return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }

      res.json({
        success: true,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    } catch (error) {
      console.error('Password verification error:', error);
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', error: error.message });
    }
  },

  // GET /api/users/profile
  getProfile: async (req, res) => {
    try {
      const user_id = req.user.user_id; // ‡∏à‡∏≤‡∏Å JWT token

      console.log('=== Debug: Getting profile for user_id ===');
      console.log('user_id from token:', user_id);

      const user = await User.findById(user_id);
      if (!user) {
        return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
      }

      console.log('=== Debug: User data from database ===');
      console.log('Full user object:', user);
      console.log('branch_name from DB:', user.branch_name);
      console.log('position_name from DB:', user.position_name);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° password)
      const { user_id: userId, user_code, username, Fullname, email, phone, avatar, street, parish, district, province, postal_no, branch_name, position_name, role_name, line_notify_enabled, line_id, branch_id, position_id, role_id, created_at, updated_at } = user;

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend
      let role = 'user';
      if (role_name && role_name.toLowerCase().includes('admin')) role = 'admin';
      else if (role_name && role_name.toLowerCase().includes('executive')) role = 'executive';

      const userProfile = {
        user_id: userId,
        user_code,
        username,
        Fullname,
        email,
        phone,
        avatar,
        street,
        parish,
        district,
        province,
        postal_no,
        branch_name,
        position_name,
        role_name,
        line_notify_enabled,
        line_id,
        branch_id,
        position_id,
        role_id,
        created_at,
        updated_at,
        role
      };

      console.log('=== Debug: Profile response ===');
      console.log('User profile being sent:', userProfile);

      res.json({
        message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        user: userProfile
      });
    } catch (error) {
      console.error('Get profile error:', error);
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', error: error.message });
    }
  },

  createUser: async (req, res) => {
    try {
      const userData = req.body;
      if (!userData || typeof userData !== 'object') {
        return res.status(400).json({
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤',
          error: 'Request body is missing or invalid'
        });
      }
      console.log('Creating user with data:', userData);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const requiredFields = [
        { key: 'user_code', label: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï/‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£' },
        { key: 'username', label: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' },
        { key: 'password', label: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' },
        { key: 'email', label: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•' },
        { key: 'phone', label: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå' },
        { key: 'Fullname', label: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' },
        { key: 'position_id', label: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á' },
        { key: 'branch_id', label: '‡∏™‡∏≤‡∏Ç‡∏≤' },
        { key: 'street', label: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà' },
        { key: 'province', label: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' },
        { key: 'district', label: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠' },
        { key: 'parish', label: '‡∏ï‡∏≥‡∏ö‡∏•' },
        { key: 'postal_no', label: '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå' }
      ];
      const missing = requiredFields.filter(f => !userData[f.key] || userData[f.key].toString().trim() === '');
      if (missing.length > 0) {
        return res.status(400).json({
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å: ' + missing.map(f => f.label).join(', '),
          missing: missing.map(f => f.key)
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      if (userData.password && userData.password.length < 6) {
        return res.status(400).json({
          message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
          field: 'password'
        });
      }
      // hash password ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      if (userData.password) {
        userData.password = await bcrypt.hash(userData.password, 10);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö username: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô a-zA-Z0-9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const usernamePattern = /^[a-zA-Z0-9]+$/;
      if (!usernamePattern.test(userData.username)) {
        return res.status(400).json({
          message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          field: 'username'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥
      const existUser = await User.findByUsername(userData.username);
      if (existUser) {
        return res.status(400).json({
          message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà',
          field: 'username'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_code ‡∏ã‡πâ‡∏≥
      const existUserCode = await User.findByUserCode(userData.user_code);
      if (existUserCode) {
        return res.status(400).json({
          message: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï/‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∑‡πà‡∏ô',
          field: 'user_code'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (userData.phone && !/^[0-9]+$/.test(userData.phone)) {
        return res.status(400).json({
          message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
          field: 'phone'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥
      const existEmail = await User.findByEmail(userData.email);
      if (existEmail) {
        return res.status(400).json({
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô',
          field: 'email'
        });
      }

      // Create the user
      const createdUser = await User.create(userData);

      if (!createdUser) {
        return res.status(500).json({
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
          error: 'Failed to create user'
        });
      }

      // Return the created user data
      res.status(201).json({
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        user: createdUser
      });

    } catch (error) {
      console.error('Error creating user:', error);

      // Handle duplicate email error
      if (error.code === 'ER_DUP_ENTRY' && error.sqlMessage.includes('email')) {
        return res.status(400).json({
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
          error: 'Email already exists'
        });
      }

      // Handle other errors
      res.status(500).json({
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        error: error.message
      });
    }
  },

  updateUser: async (req, res) => {
    try {
      console.log('=== ENTER updateUser ===', new Date().toISOString());
      const userId = parseInt(req.params.id, 10);
      console.log('Updating user with ID:', userId);
      console.log('Request body:', req.body);

      // Remove otp from req.body before updating DB
      if ('otp' in req.body) {
        console.log('otp field exists in req.body at start');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!userId) {
        console.log('Return: Invalid user ID');
        return res.status(400).json({
          message: 'Invalid user ID',
          error: 'User ID is required'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (Object.keys(req.body).length === 0) {
        console.log('Return: No data provided for update');
        return res.status(400).json({
          message: 'No data provided for update',
          error: 'Request body is empty'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      if (req.body.password) {
        if (!req.body.otp) {
          console.log('Return: Missing OTP');
          return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
        }
        const user = await User.findById(userId);
        if (!user) {
          console.log('Return: User not found for OTP check');
          return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
        }
        // Debug log for OTP validation (‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
        console.log('==== OTP DEBUG', new Date().toISOString(), '====');
        console.log('otpStore:', Array.from(otpStore.entries()));
        console.log('user.email:', user.email);
        console.log('req.body.otp:', req.body.otp);
        const otpData = otpStore.get(user.email);
        console.log('otpData:', otpData);
        if (otpData) {
          console.log('otpData.otp:', otpData.otp, 'otpData.expires:', otpData.expires, 'now:', Date.now(), 'expired:', Date.now() > otpData.expires);
        }
        if (!otpData || otpData.otp !== req.body.otp || Date.now() > otpData.expires) {
          console.log('OTP validation failed');
          return res.status(400).json({ message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
        }
        console.log('OTP validation success, deleting from otpStore');
        otpStore.delete(user.email); // ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö
        // Remove otp from req.body after validation
        delete req.body.otp;
        // hash password ‡∏Å‡πà‡∏≠‡∏ô update (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô createUser)
        try {
          req.body.password = await bcrypt.hash(req.body.password, 10);
          console.log('Password hashed before update');
        } catch (err) {
          console.error('Error hashing password:', err);
          return res.status(500).json({ message: 'Error hashing password', error: err.message });
        }
      }

      const result = await User.updateById(userId, req.body);
      console.log('Update result:', result);

      if (!result || result.affectedRows === 0) {
        console.log('Return: User not found or no changes made');
        return res.status(404).json({
          message: 'User not found or no changes made',
          error: 'Update operation did not affect any rows'
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
      const updatedUser = await User.findById(userId);
      if (!updatedUser) {
        console.log('Return: Failed to fetch updated user data');
        return res.status(404).json({
          message: 'Failed to fetch updated user data',
          error: 'User not found after update'
        });
      }

      console.log('Return: User updated successfully');
      res.json({
        message: 'User updated successfully',
        user: updatedUser
      });

    } catch (error) {
      console.error('Error in updateUser:', error);
      res.status(500).json({
        message: 'Error updating user',
        error: error.message || 'Unknown error occurred'
      });
    }
  },

  updateLineNotifyEnabled: async (req, res) => {
    const userId = req.params.id;
    const { line_notify_enabled } = req.body;

    console.log('=== updateLineNotifyEnabled ===');
    console.log('User ID:', userId);
    console.log('line_notify_enabled:', line_notify_enabled);
    console.log('Request body:', req.body);

    try {
      if (typeof line_notify_enabled === 'undefined') {
        console.log('Error: Missing line_notify_enabled');
        return res.status(400).json({ message: 'Missing line_notify_enabled' });
      }

      const result = await User.updateLineNotifyEnabled(userId, line_notify_enabled);
      console.log('Update result:', result);

      if (result.affectedRows === 0) {
        console.log('Error: User not found');
        return res.status(404).json({ message: 'User not found' });
      }

      console.log('Success: LINE notify updated');
      res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
      console.error('Error in updateLineNotifyEnabled:', err);
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
    }
  },

  deleteUser: async (req, res) => {
    try {
      const userId = req.params.id;
      const result = await User.delete(userId);

      if (result.affectedRows === 0) {
        return res.status(404).json({
          message: 'User not found',
          error: 'No user found with the provided ID'
        });
      }

      res.json({
        message: 'User deleted successfully',
        affectedRows: result.affectedRows
      });
    } catch (err) {
      console.error('Error deleting user:', err);
      res.status(500).json({
        message: 'An error occurred while deleting user',
        error: err.message
      });
    }
  },

  uploadImage: (req, res) => {
    console.log('Received request body:', req.body); // Debug log
    upload(req, res, function (err) {
      if (err instanceof multer.MulterError) {
        // A Multer error occurred when uploading
        if (err.code === 'LIMIT_FILE_SIZE') {
          return res.status(400).json({
            message: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2MB',
            error: err.message
          });
        }
        return res.status(400).json({
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå',
          error: err.message
        });
      } else if (err) {
        // An unknown error occurred
        console.error('Upload error:', err);
        return res.status(500).json({
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå',
          error: err.message
        });
      }

      // Everything went fine
      if (!req.file) {
        return res.status(400).json({
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î',
          error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î'
        });
      }

      try {
        // Get the filename from multer
        const filename = req.file.filename;
        console.log('Uploaded filename:', filename); // Debug log

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        const imageUrl = `http://localhost:5000/uploads/${filename}`;

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        res.json({
          message: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          filename: filename,
          imageUrl: imageUrl
        });
      } catch (error) {
        console.error('Error processing upload response:', error);
        res.status(500).json({
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå',
          error: error.message
        });
      }
    });
  },

  // Get users by role
  getUsersByRole: async (req, res) => {
    try {
      const results = await User.getUsersByRole(req.params.role);

      // Return empty array instead of 404 if no results found
      const mapped = results.map(user => ({
        ...user,
        avatar: user.avatar ? `http://localhost:5000/uploads/${user.avatar}` : null
      }));

      res.json(mapped);
    } catch (err) {
      console.error('Error in getUsersByRole:', err);
      res.status(500).json({ error: err.message });
    }
  },

  // GET /api/users/sessions - ‡∏î‡∏π session ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
  getActiveSessions: async (req, res) => {
    try {
      const userId = req.user.user_id;
      const userSessions = activeSessions.get(userId) || [];

      const sessions = userSessions.map(session => ({
        deviceInfo: session.deviceInfo,
        loginTime: session.loginTime,
        lastActivity: session.lastActivity,
        isCurrent: session.token === req.headers.authorization?.replace('Bearer ', '')
      }));

      res.json({ sessions });
    } catch (err) {
      console.error('Error getting active sessions:', err);
      res.status(500).json({ error: err.message });
    }
  },

  // POST /api/users/logout - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  logout: async (req, res) => {
    try {
      const userId = req.user.user_id;
      const token = req.headers.authorization?.replace('Bearer ', '');

      if (token) {
        // ‡∏•‡∏ö session ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö token
        const userSessions = activeSessions.get(userId) || [];
        const updatedSessions = userSessions.filter(session => session.token !== token);

        if (updatedSessions.length === 0) {
          activeSessions.delete(userId);
        } else {
          activeSessions.set(userId, updatedSessions);
        }
      }

      res.json({ message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
      console.error('Error during logout:', err);
      res.status(500).json({ error: err.message });
    }
  },

  // POST /api/users/logout-all - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  logoutAll: async (req, res) => {
    try {
      const userId = req.user.user_id;
      activeSessions.delete(userId);

      res.json({ message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
      console.error('Error during logout all:', err);
      res.status(500).json({ error: err.message });
    }
  }
};

export default userController;